* Kenton's Emacs Config

  Attempting to write a literate config file that gets consumed by babel.

  Inspired by -

  - Daniel Mai - [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Github]]
  - David Wilson - [[https://github.com/daviwil/emacs-from-scratch][Github]] [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][Youtube]]
    
* Personal Info

  #+begin_src emacs-lisp
    (setq user-full-name: "Kenton Appanaitis"
          user-mail-address: "kappanaitis@gmail.com")
  #+end_src

* System Settings

** Saved Customization File

  When saving custom settings in Emacs, they get written out to a file. This puts these custom settings into custom.el instead of init.el.
  
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
  #+end_src

** Startup Performance
  
  #+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
    
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
                         (time-subtract after-init-time before-init-time)))
               gcs-done))
    
    (add-hook 'emacs-startup-hook #'efs/display-startup-time) 
  #+end_src

** Auto Package Updates
  [[https://github.com/rranelli/auto-package-update.el][Github]]
  
  #+begin_src emacs-lisp
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7) ;auto updates after N days
      (auto-package-update-prompt-before-update t) ;asks before update
      (auto-package-update-hide-results t) ;prevents buffer with update results from popping up
      (auto-package-update-delete-old-versions t) ;removes residual old version directories
      :config
      (auto-package-update-maybe) ;updates packages at emacs startup
      (auto-package-update-at-time "01:00")) ;check for updates @ what time
  #+end_src

* Key Bindings
  
* UI Settings
  
** Themes
*** Theme functions

    The below functions are for switching and disabling themes.

    - =switch-theme=
      Interactive mode displays a searchable list of themes.
      Call directly with a theme name as the arg.
    - =disable-active-themes=
      Disables all active themes.
    
    #+begin_src emacs-lisp
      (defun kmax/switch-theme (theme)
        "Disables any currently active themes and loads THEME."
        ;; This interactive call is taken from `load-theme'
        (interactive
         (list
          (intern (completing-read "Load custom theme: "
                                   (mapc 'symbol-name
                                         (custom-available-themes))))))
        (let ((enabled-themes custom-enabled-themes))
          (mapc #'disable-theme custom-enabled-themes)
          (load-theme theme t)))
      
      (defun kmax/disable-active-themes ()
        "Disables any currently active themes listed in `custom-enabled-themes'."
        (interactive)
        (mapc #'disable-theme custom-enabled-themes))     
      
     ;; TODO - Figure out keybindings that make sense for these
    #+end_src
    
*** Doom Theme
    [[https://github.com/hlissner/emacs-doom-themes][Github]]
    
    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        (customize-set-variable 'doom-vibrant-brighter-comments t)
        (kmax/switch-theme 'doom-vibrant))
    #+end_src

** Modeline
*** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Github]]
   
    #+begin_src emacs-lisp
      (use-package doom-modeline
        :init (doom-modeline-mode 1)
        :custom ((doom-modeline-height 15)))
    #+end_src

** Fonts
*** Font Vars
    
    Control global font sizes for Emacs, values are in 1/10th of a point.
    
    #+begin_src emacs-lisp
      (defvar efs/default-font-size 120) ;monospaced fonts
      (defvar efs/default-variable-font-size 120) 
    #+end_src

*** Font Faces
    
    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "JetBrains Mono" :height efs/default-font-size)
      
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height efs/default-font-size)
      
      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height efs/default-variable-font-size :weight 'regular)
    #+end_src

*** All The Icons
    [[https://github.com/domtronn/all-the-icons.el][Github]]
    
    Enabling all-the-icons font. Font will still need to be installed after first start with =M-x all-the-icons-install-fonts=
    
    #+begin_src emacs-lisp
      (use-package all-the-icons)
    #+end_src
    
