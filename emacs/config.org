* Kenton's Emacs Config

  Attempting to write a literate config file that gets consumed by babel.

  Inspired by -

  - David Wilson - [[https://github.com/daviwil/emacs-from-scratch][Github]] [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][Youtube]]
  - Daniel Mai - [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Github]]
    
** Personal Info

  #+begin_src emacs-lisp
    (setq user-full-name: "Kenton Appanaitis"
          user-mail-address: "kappanaitis@gmail.com")
  #+end_src

  
* System
** Saved Customization File

  Settings using customize are saved in custom.el instead of init.el.
  
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
  #+end_src

** Startup Performance
   
  #+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    ;; (setq gc-cons-threshold (* 50 1000 1000))
    
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			 (time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'efs/display-startup-time) 
  #+end_src

** Env Vars

#+begin_src emacs-lisp
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src


** Built-Ins

   Enable electric-pair-mode so that character pair for things like "" are automatically added

   #+begin_src emacs-lisp
     (electric-pair-mode 1)
   #+end_src
   
** Line Numbers

   Turn on relative line numbers. I would like both literal and relative line numbers columns but I haven't seen a method for that in emacs yet.

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode t)
     (setq display-line-numbers-type 'relative)
     
     ;; Modes to ignore line numbers on
     (dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src
   
** Fonts
*** Font Size
    
    Control global font sizes for Emacs, values are in 1/10Th of a point.
    
    #+begin_src emacs-lisp
      (defvar kmax/default-font-size 120) ;monospaced fonts
      (defvar kmax/default-variable-font-size 120) 
    #+end_src

*** Font Selection

    Select the font for each face. Default and fixed-pitch are set as a mono spaced font, and variable pitch to a readable font for something like org mode.

    Fonts need to be installed. Selected fonts:
    - [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]]
    - [[https://fonts.google.com/specimen/Source+Sans+Pro][Source Sans Pro]]

    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "JetBrains Mono" :height kmax/default-font-size)
      
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height kmax/default-font-size)
      
      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height kmax/default-variable-font-size :weight 'regular)
    #+end_src

** daemon

Setup TCP daemon for remote connectivity. FIXME - I can't get this to work right. The client will connect remote, but hangs at "Waiting for Emacs"

#+begin_src emacs-lisp
  ;; (setq server-host "0.0.0.0"
  ;;       server-port 65100
  ;;       server-use-tcp t)
#+end_src
    

* Keybindings
** Evil

[[https://github.com/emacs-evil/evil][Github]]

Evil is used to get vim key mappings and modal operation for editing text

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;; (setq evil-want-C-u-scroll t)
    ;; (setq evil-want-C-i-jump nil)
    :custom
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    ;; I'm not sure aboute this
    ;;(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; Changes numbered motion key behaviour. dj would only delete one line.
    ;; d5j would delete 5 total lines, not 5 lines below
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src
   
*** evil-collection

[[https://github.com/emacs-evil/evil-collection][Github]]

Defines vi like bindings for multiple modes outside of the base evil mappings

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+end_src
  
*** evil-commentary

[[https://github.com/linktohack/evil-commentary][Github]]

Allows for commenting with `gcc` for a single line or `gc<direction>`, e.f. `gc2j` for comment this line and 2 below

#+begin_src emacs-lisp
  (use-package evil-commentary)
  (evil-commentary-mode)
#+end_src

*** evil-eurround

[[https://github.com/emacs-evil/evil-surround][Github]]

Surrounds selection with pairs. Use `ysiw"` to surround inner word with `"`. For `()` and `[]` if you use the open bracket/brace
you will get a space in your surrounds like so - `[ foo ]`. If you use the close option you will get no space like so - `[bar]`

#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src

*** evil-mc

[[https://github.com/magnars/multiple-cursors.el][Github]]

Select multiple lines and add cursor to the beginning of all lines in selection

#+begin_src emacs-lisp
  (use-package evil-mc)
  (global-evil-mc-mode  1)
#+end_src


** General

[[https://github.com/noctuid/general.el][Github]]

Use General to create leader key bindings. Setting a custom definer function in the `kmax` namespace.

`kmax/leader-keys` can be called throughout the config to define new bindings. It is set with the `SPC` prefix
and the `C-SPC` global-prefix. All keys defined in `kmax/leader-keys` can be accessed after using the `SPC` leader
or `C-SPC` leader where `SPC` is used for something else, e.g. Evil `insert` state.
   
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t) 
    (general-create-definer kmax/leader-keys
			    :keymaps '(override)
			    :states '(normal insert visual emacs treemacs magit) 
			    :prefix "SPC"
			    :global-prefix "C-SPC")

    (kmax/leader-keys
      "SPC" '(counsel-M-x :which-key "M-x")
      "m"  '(:keymap prog-mode-map :which-key "mode map")))

  (general-define-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
     
*** Leader Bindings

Leader bindings for all packages are below. Helps keep a good view of what is in use for each chain of leaders.

**** buffers

#+begin_src emacs-lisp
  (kmax/leader-keys
    "TAB" '((lambda () (interactive) (switch-to-buffer (other-buffer))) :which-key "previous buffer")
    "b"  '(:ignore t :which-key "buffers")
    "bb" '(counsel-switch-buffer :which-key "buffers list")
    "bd" '(kill-this-buffer :which-key "kill buffer")
    "bn" '(:ignore t :which-key "new buffers")
    "bnn" '(evil-buffer-new :which-key "new buffer"))

    ; Need some functions to discover if a window is already adjacent or if it needs to create one and then
    ; open new buffers
    ; "bnl" '(:ignore t :which-key "new buffer left")
    ; "bnr" '(:ignore t :which-key "new buffer right")
    ; "bnt" '(:ignore t :which-key "new buffer top")
    ; "bnb" '(:ignore t :which-key "new buffer bottom")
    ; "b C-S-d" '(kill-matching-buffers :which-key "kill buffers regex") 
#+end_src

**** cursors

#+begin_src emacs-lisp
  ;TODO
#+end_src

**** files

#+begin_src emacs-lisp
  (kmax/leader-keys
     "f"  '(:ignore t :which-key "files")
     "fe"  '(:ignore t :which-key "emacs files")
     ;; "fec" '(:ignore t :which-key "emacs files")
     "ff"  '(counsel-find-file :which-key "find files")
     "fs"  '(save-buffer :which-key "save")
     "fS"  '(:ignore t :which-key "save options")
     "fSa" '(save-some-buffers :which-key "save all")
     "fSg" '(magit-save-repository-buffers :which-key "save repo")
     "fSp" '(projectile-save-project-buffers :which-key "save project"))
#+end_src

**** emacs

#+begin_src emacs-lisp
  (kmax/leader-keys
    "e"  '(:ignore t :which-key "emacs")
    "ec" '((lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org"))) :which-key "config.org")
    "ee" '(eval-last-sexp :which-key "eval <-point")
    "eE" '(eval-print-last-sexp :which-key "eval <-point print buffer")
    "ei" '((lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/init.el"))) :which-key "init.el")
    "er" '((lambda () (interactive) (load-file (expand-file-name "~/.emacs.d/init.el"))) :which-key "reload init.el")
  )
#+end_src

**** git

#+begin_src emacs-lisp
  (kmax/leader-keys
     "g"  '(:ignore t :which-key "git")
     "gb"  '(magit-branch :which-key "branch")
     "gc"  '(magit-commit :which-key "commit")
     "gF"  '(magit-pull :which-key "pull")
     "gP"  '(magit-push :which-key "push")
     "gr"  '(magit-rebase :which-key "push")
     "gs"  '(magit-status :which-key "status"))
#+end_src

**** project

#+begin_src emacs-lisp
  (kmax/leader-keys
     "p"   '(:ignore t :which-key "projects")
     "pp"  '(projectile-switch-project :which-key "switch project")
     "pt"  '(:ignore t :which-key "treemacs")
     "pta" '(treemacs-finish-edit :which-key "apply workspace config")
     "ptc" '(treemacs-create-workspace :which-key "create workspace")
     "ptd" '(treemacs-remove-workspace :which-key "delete workspace")
     "pte" '(treemacs-edit-workspaces :which-key "edit workspaces")
     "pts" '(treemacs-switch-workspace :which-key "switch workspace")
     "ptt" '(treemacs :which-key "view workspace")
  )
#+end_src

**** quit

#+begin_src emacs-lisp
  (kmax/leader-keys
     "q"  '(:ignore t :which-key "quit options")
     "qq" '(kill-emacs :which-key "quit")
     "qr" '(restart-emacs :which-key "restart"))
#+end_src
     
**** toggles

#+begin_src emacs-lisp
  (kmax/leader-keys
     "t"  '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")
     "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

**** search

#+begin_src emacs-lisp
  (kmax/leader-keys
      "s" '(:ignore t :which-key "search")
      "sf" '(swiper :which-key "buffer forward")
      "sF" '(swiper-all :which-key "all buffers")
      "sb" '(swiper-backward :which-key "buffer backward")
      "ss" '(swiper-thing-at-point :which-key "at point in buffer")
      "sS" '(swiper-all-thing-at-point :which-key "at point all buffers")
      "sr" '(:ignore t :which-key "ripgrep")
      "srm" '(rg-menu :which-key "ripgrep menu")
      "srd" '(rg-dwim :which-key "rigrep magic")
      "srp" '(rg-project :which-key "ripgrep project")
      "srP" '(counsel-projectile-rg :which-key "projectile ripgrep")
  )
#+end_src

**** windows

#+begin_src emacs-lisp
  (kmax/leader-keys
     "w"  '(:ignore t :which-key "windows")
     "wd" '(delete-window :which-key "windows")
     "wh" '(evil-window-left :which-key "windows")
     "wj" '(evil-window-down :which-key "windows")
     "wk" '(evil-window-up :which-key "windows")
     "wl" '(evil-window-right :which-key "windows"))
#+end_src


* Packages

** Auto Package Updates

[[https://github.com/rranelli/auto-package-update.el][Github]]

Asks for periodic package updates on startup
  
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)             ;auto updates after N days
    (auto-package-update-prompt-before-update t) ;asks before update
    (auto-package-update-hide-results t)         ;prevents buffer with update results from popping up
    (auto-package-update-delete-old-versions t)  ;removes residual old version directories
    :config
    (auto-package-update-maybe)                  ;updates packages at emacs startup
    (auto-package-update-at-time "01:00"))       ;check for updates @ what time
#+end_src
   

** All The Icons

[[https://github.com/domtronn/all-the-icons.el][Github]]
    
Enabling all-the-icons font. Font will still need to be installed after first start with =M-x all-the-icons-install-fonts=
    
#+begin_src emacs-lisp
  ; This is recommended on git, but seems to have no effect besides an error on first start
  ;(when (display-graphic-p)
  ;   (require 'all-the-icons))

  (use-package all-the-icons
     :if (display-graphic-p))
#+end_src


** Company Mode
   [[https://company-mode.github.io/][Github.io]]

   Autocompletion framework with drop down suggestion

   #+begin_src emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
   #+end_src

*** Tabnine
    [[https://github.com/TommyX12/company-tabnine][Github]]

    AI Autocompletion backend for Company. All-languages

    #+begin_src emacs-lisp
      (use-package company-tabnine :ensure t)
      (add-to-list 'company-backends #'company-tabnine)
    #+end_src

** Doom Theme
    [[https://github.com/hlissner/emacs-doom-themes][Github]]
    
    Install doom themes and choose doom-vibrant as default

    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        (customize-set-variable 'doom-vibrant-brighter-comments t)
        (load-theme 'doom-vibrant))
    #+end_src
    

** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Github]]

   Install doom modeline and adjust settings
   
    #+begin_src emacs-lisp
      (use-package doom-modeline
        :init (doom-modeline-mode 1)
        :custom ((doom-modeline-height 15)))
    #+end_src
    

** eldoc

[[https://www.emacswiki.org/emacs/ElDoc][Docs]]

#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)

  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
  (add-hook 'ielm-mode-hook 'eldoc-mode)
#+end_src


** flycheck

[[https://www.flycheck.org/en/latest/][Docs]]

On-the-fly syntax checking

#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src


** helpful

[[https://github.com/Wilfred/helpful][Github]]

Extended help that includes source and current state

#+begin_src emacs-lisp
  (use-package helpful)

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  (global-set-key (kbd "C-h C") #'helpful-command)
#+end_src


** hl-todo

[[https://github.com/tarsius/hl-todo][Github]]

Highlights TODO/FIXME/NOTE/etc... For all default faces use describe-variable on `hl-todo-keyword-faces`

#+begin_src emacs-lisp
  (use-package hl-todo
     :ensure t
     :custom-face
     (hl-todo ((t (:inherit hl-todo :italic t))))
     :hook ((prog-mode . hl-todo-mode)
	    (org-mode . hl-todo-mode)
	    (yaml-mode . hl-todo-mode)))
#+end_src


** Hydra

[[https://github.com/abo-abo/hydra][Github]]

Hydra ties transient key bindings to related commands. Essentially creating sub menus for functionality

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src

*** Scale Text

Add a popup menu for scaling text

#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-decrease "down")
    ("k" text-scale-increase "up")
    ("q" nil "finished" :exit t))
#+end_src
    

** ivy / counsel / swiper

[[https://github.com/abo-abo/swiper][Github]]

Tools for narrowing lists through fuzzy search (Ivy), functions to use narrowing for things like files (Cousel), and a search mechanism (Swiper)
   
 #+begin_src emacs-lisp
    (use-package ivy
     :custom
      (ivy-count-format "(%d/%d) ")
      (ivy-use-virtual-buffers t)
     :config (ivy-mode))

    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")

    (global-set-key (kbd "C-s") 'swiper-isearch)
    (global-set-key (kbd "M-x") 'counsel-M-x)

    (use-package counsel
      :after ivy)

    (use-package counsel-projectile
      :after counsel
      :config (counsel-projectile-mode))

    (use-package swiper
      :after ivy
      :bind (("C-s" . swiper)))

    (use-package ivy-rich
      :after ivy
      :init (ivy-rich-mode 1)
      :custom
      (ivy-virtual-abbreviate 'full
       ivy-rich-switch-buffer-align-virtual-buffer t
       ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
				   'ivy-rich-switch-buffer-transformer))

    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

    (use-package ivy-xref
      :init
      ;; xref initialization is different in Emacs 27 - there are two different
      ;; variables which can be set rather than just one
      (when (>= emacs-major-version 27)
	(setq xref-show-definitions-function #'ivy-xref-show-defs))
      ;; Necessary in Emacs <27. In Emacs 27 it will affect all xref-based
      ;; commands other than xref-find-definitions (e.g. project-find-regexp)
      ;; as well
      (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

   (use-package all-the-icons-ivy
     :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
   #+end_src


** Magit

[[https://github.com/magit/magit][GitHub]]

Best git edit integration ever

#+begin_src emacs-lisp
  (use-package magit)
#+end_src
    


** no-littering

[[https://github.com/emacscollective/no-littering][Github]]

Keeps emacs/package files corralled.

#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
	`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src


** Projectile

[[https://github.com/bbatsov/projectile][Github]]

Groups known file structures into projects. Primarily git repos.

#+begin_src emacs-lisp
  (use-package projectile
  :hook
  (after-init . projectile-mode)
  :init
  (setq projectile-project-search-path '("~/Code/")))

  ;; (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src
   

** Rainbow-Delimiters

[[https://github.com/Fanael/rainbow-delimiters][GitHub]]

Colorful open/close delimiters for easy matching

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src


** restclient

[[https://github.com/pashky/restclient.el][Github]]

HTTP rest client

#+begin_src emacs-lisp
  (use-package restclient)
#+end_src

** rg

[[https://github.com/dajva/rg.el][Github]]
[[https://rgel.readthedocs.io/en/2.2.1/index.html][Manual]]

rg.el is an integration of ripgrep and emacs. Requires `ripgrep` to be installed on the workstation. Ubuntu distros - `sudo apt install ripgrep`

#+begin_src emacs-lisp
  (use-package rg)
  (rg-enable-default-bindings)
#+end_src


** sudo-edit

Use sudo-edit on opened file to enable root privileges for editing

#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src


** Treemacs

[[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjUvcb64p_7AhVslGoFHULHDR8QFnoECAwQAQ&url=https%3A%2F%2Fgithub.com%2FAlexander-Miller%2Ftreemacs&usg=AOvVaw0q411mH86k9gDCvRN0IGse][GitHub]]

Tree file view used in conjunction with projectile. Group projects into workspaces that can be viewed in the tree.

#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                  (if treemacs-python-executable 3 0)
	    treemacs-missing-project-action          'ask)
      ;; The default width and height of the icons is 22 pixels. If you are

      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-all-the-icons)
  (treemacs-load-theme 'all-the-icons)

  ;;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    ;;:after (treemacs persp-mode) ;;or perspective vs. persp-mode
    ;;:ensure t
    ;;:config (treemacs-set-scope-type 'Perspectives))

  ;;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    ;;:after (treemacs)
    ;;:ensure t
    ;;:config (treemacs-set-scope-type 'Tabs))
#+end_src
    

** undo-tree

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  )
#+end_src


** Which-Key

[[https://github.com/justbur/emacs-which-key][Github]]

Automated menu system that pops into view for next possible keys in sequence.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.05
	  which-key-sort-order 'which-key-key-order-alpha))
#+end_src


* Languages

** babel

*** http

[[https://github.com/zweifisch/ob-http][Github]]

#+begin_src emacs-lisp
  (use-package ob-http)

#+end_src


*** load languages

Load all babel languages here

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (http . t)))
#+end_src


** lsp

[[https://github.com/emacs-lsp/lsp-mode][Github]]

Language server package for IDE experience in Emacs. Integrates with `company`, `flycheck`, and `projectile`.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (rustic-mode . lsp)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :custom
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6))

  ;; optionally
  (use-package lsp-ui
     :commands
     lsp-ui-mode
     :custom
     ;; Turn these on with t for more visual stuff on the screen all the time
     (lsp-ui-peek-always-show nil)
     (lsp-ui-sideline-show-hover nil)
     (lsp-ui-doc-enable nil))

  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
#+end_src


** python

Setup for programming in rust. Using a lot of the details provided here - [[https://github.com/daviwil/emacs-from-scratch/wiki/LSP-Python-(pyright)-config-in-emacs-from-scratch#wiki-pages-box][LSP Python (pyright) config in emacs from scratch]]

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook
    (python-mode . (lambda ()
		     (require 'lsp-pyright)
		     (lsp-deferred))))

  (use-package pyenv-mode)
  
  (use-package blacken
  :init
  (setq-default blacken-fast-unsafe t)
  (setq-default blacken-line-length 80))

  (use-package python-mode
  :hook
  (python-mode . pyvenv-mode)
  (python-mode . flycheck-mode)
  (python-mode . company-mode)
  (python-mode . blacken-mode)
  (python-mode . yas-minor-mode)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  (python-shell-interpreter "python3")
  :config
  )
#+end_src


** rust

Setup for programming in rust. Using a lot of the details provided here - [[https://robert.kra.hn/posts/rust-emacs-setup/][Configuring Emacs for Rust Development]]

Requires `rust-analyzer` to be installed using `rustup`

#+begin_src emacs-lisp
  (use-package rustic
    :bind (:map rustic-mode-map
		("M-j" . lsp-ui-imenu)
		("M-?" . lsp-find-references)
		("C-c C-c l" . flycheck-list-errors)
		("C-c C-c a" . lsp-execute-code-action)
		("C-c C-c r" . lsp-rename)
		("C-c C-c q" . lsp-workspace-restart)
		("C-c C-c Q" . lsp-workspace-shutdown)
		("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; (setq rustic-analyzer-command '("/home/kenton/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rust-analyzer"))
    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'kmax/rustic-mode-hook))

  (defun kmax/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

  ;; (lsp-rust-analyzer-server-display-inlay-hints t)
  ;; (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;; (lsp-rust-analyzer-display-chaining-hints t)
  ;; (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  ;; (lsp-rust-analyzer-display-closure-return-type-hints t)
  ;; (lsp-rust-analyzer-display-parameter-hints nil)
  ;; (lsp-rust-analyzer-display-reborrow-hints nil)lsp-rust-analyzer-cargo-watch-command "clippy")
#+end_src


** terraform

#+begin_src emacs-lisp
  (use-package terraform-mode)
  (add-hook 'terraform-mode-hook 'terraform-format-on-save-mode)
#+end_src

** yaml

#+begin_src emacs-lisp
  (use-package yaml-mode)
  (add-hook 'yaml-mode-hook
     (lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src


** html

#+begin_src emacs-lisp
  (use-package web-mode
   :commands (web-mode)
   :mode (("\\.html?\\'" . web-mode)
	  ("\\.tpl\\.php\\'" . web-mode)
	  ("\\.[agj]sp\\'" . web-mode)
	  ("\\.as[cp]x\\'" . web-mode)
	  ("\\.erb\\'" . web-mode)
	  ("\\.mustache\\'" . web-mode)
	  ("\\.djhtml\\'" . web-mode)
	  ("\\.phtml\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-comment-style 2)
  )
#+end_src


** javascript

js-mode is native in emacs. js2-mode is apparently better, but vue uses js-mode for various reasos.

#+begin_src emacs-lisp
;; nothing here yet
#+end_src


** json

#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

** vue

#+begin_src emacs-lisp
  (use-package vue-mode
   :mode "\\.vue\\'"
   :config
   (add-hook 'vue-mode-hook #'lsp))
#+end_src

* TODOs
yasnippet
python - TODO - dap mode
rust - TODO dap-mode
terraform
javascript
vue
