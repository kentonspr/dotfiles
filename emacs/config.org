* Kenton's Emacs Config

  Attempting to write a literate config file that gets consumed by babel.

  Inspired by -

  - David Wilson - [[https://github.com/daviwil/emacs-from-scratch][Github]] [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][Youtube]]
  - Daniel Mai - [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Github]]
    
* Personal Info

  #+begin_src emacs-lisp
    (setq user-full-name: "Kenton Appanaitis"
          user-mail-address: "kappanaitis@gmail.com")
  #+end_src

* System Settings
** Saved Customization File

  Settings using customize are saved in custom.el instead of init.el.
  
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
  #+end_src

** Startup Performance
   
  #+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
    
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
                         (time-subtract after-init-time before-init-time)))
               gcs-done))
    
    (add-hook 'emacs-startup-hook #'efs/display-startup-time) 
  #+end_src

** Sane Defaults
   
* UI Settings
** Fonts
*** Font Size
    
    Control global font sizes for Emacs, values are in 1/10Th of a point.
    
    #+begin_src emacs-lisp
      (defvar kmax/default-font-size 120) ;monospaced fonts
      (defvar kmax/default-variable-font-size 120) 
    #+end_src

*** Font Selection

    Select the font for each face. Default and fixed-pitch are set as a mono spaced font, and variable pitch to a readable font for something like org mode.

    Fonts need to be installed. Selected fonts:
    - [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]]
    - [[https://fonts.google.com/specimen/Source+Sans+Pro][Source Sans Pro]]

    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "JetBrains Mono" :height kmax/default-font-size)
      
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height kmax/default-font-size)
      
      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height kmax/default-variable-font-size :weight 'regular)
    #+end_src

** Line Numbers
   Turn on relative line numbers. I would like both literal and relative line numbers columns but I haven't seen a method for that in emacs yet.
   #+begin_src emacs-lisp
     (global-display-line-numbers-mode t)
     (setq display-line-numbers-type 'relative)
     
     ;; Modes to ignore line numbers on
     (dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src
   
** Modeline
   
* Packages
** System
*** Auto Package Updates
  [[https://github.com/rranelli/auto-package-update.el][Github]]
  
  #+begin_src emacs-lisp
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)             ;auto updates after N days
      (auto-package-update-prompt-before-update t) ;asks before update
      (auto-package-update-hide-results t)         ;prevents buffer with update results from popping up
      (auto-package-update-delete-old-versions t)  ;removes residual old version directories
      :config
      (auto-package-update-maybe)                  ;updates packages at emacs startup
      (auto-package-update-at-time "01:00"))       ;check for updates @ what time
  #+end_src
*** no-littering
   [[https://github.com/emacscollective/no-littering][Github]]

   Keeps emacs/package files corralled.
   #+begin_src emacs-lisp
     ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
     ;; reliably, set `user-emacs-directory` before loading no-littering!
     ;(setq user-emacs-directory "~/.cache/emacs")
     
     (use-package no-littering)
     
     ;; no-littering doesn't set this by default so we must place
     ;; auto save files in the same path as it uses for sessions
     (setq auto-save-file-name-transforms
           `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
   #+end_src

** Key bindings (Non Package Specific)
*** Evil
   [[https://github.com/emacs-evil/evil][Github]]

   #+begin_src emacs-lisp
          (use-package evil
            :init
            (setq evil-want-integration t)
            (setq evil-want-keybinding nil)
            (setq evil-want-C-u-scroll t)
            (setq evil-want-C-i-jump nil)
            :config
            (evil-mode 1)
            (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
            ;; I'm sure aboute this
            ;;(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
         
            ;; Use visual line motions even outside of visual-line-mode buffers
            (evil-global-set-key 'motion "j" 'evil-next-visual-line)
            (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
         
            (evil-set-initial-state 'messages-buffer-mode 'normal)
            (evil-set-initial-state 'dashboard-mode 'normal))
   #+end_src
   
*** Evil Collection
    [[https://github.com/emacs-evil/evil-collection][Github]]

    Defines vi like bindings for multiple modes.
    #+begin_src emacs-lisp
      (use-package evil-collection
        :after evil
        :custom (evil-collection-setup-minibuffer t)
        :config
        (evil-collection-init))
    #+end_src
  
*** General
    [[https://github.com/noctuid/general.el][Github]]
   
    #+begin_src emacs-lisp
      (use-package general
        :after evil
        :config
        (general-evil-setup t) 
        (general-create-definer kmax/leader-keys
                                :keymaps '(normal insert visual emacs)
                                :prefix "SPC"
                                :global-prefix "C-SPC")
      
        (kmax/leader-keys
         "t"  '(:ignore t :which-key "toggles")
         "tt" '(helm-themes :which-key "choose theme")
         ;; "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")))
         "SPC" '(helm-M-x :which-key "M-x")))
      
      (general-define-key (kbd "<escape>") 'keyboard-escape-quit)
      (general-define-key (kbd "M-x") 'helm-M-x)
     #+end_src
     
** UI
*** Doom Theme
    [[https://github.com/hlissner/emacs-doom-themes][Github]]
    
    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        (customize-set-variable 'doom-vibrant-brighter-comments t)
        (load-theme 'doom-vibrant))
    #+end_src
*** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Github]]
   
    #+begin_src emacs-lisp
      (use-package doom-modeline
        :init (doom-modeline-mode 1)
        :custom ((doom-modeline-height 15)))
    #+end_src
*** All The Icons
    [[https://github.com/domtronn/all-the-icons.el][Github]]
    
    Enabling all-the-icons font. Font will still need to be installed after first start with =M-x all-the-icons-install-fonts=
    
    #+begin_src emacs-lisp
      (use-package all-the-icons)
    #+end_src
*** Which-Key
    [[https://github.com/justbur/emacs-which-key][Github]]

   #+begin_src emacs-lisp
     (use-package which-key
       :defer 0
       :diminish which-key-mode
       :config
       (which-key-mode)
       (setq which-key-idle-delay 0.1))
   #+end_src
*** Helm
    [[https://github.com/emacs-helm/helm][Github]]
    
    #+begin_src emacs-lisp
      (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/helm/")
      (use-package helm
        :diminish helm-mode
      (require 'helm-config)
      (helm-mode))
      
      (use-package helm-projectile
        :after: helm-mode
        :commands helm-projectile)
      (use-package helm-rg
        :after helm-mode)
      (use-package helm-swoop
        :after helm-mode)
      (use-package helm-themes
        :after helm-mode)
    #+end_src

**** Key Bindings
     #+begin_src emacs-lisp
       (general-define-key :keymaps 'helm-map
                           (kbd "<tab>") 'helm-next-line
                           (kbd "<backtab>") 'helm-previous-line)
     #+end_src
     
*** Hydra
    [[https://github.com/abo-abo/hydra][Github]]

    Hydra ties transient key bindings to related commands.

**** Scale Text
    #+begin_src emacs-lisp
      (use-package hydra
        :defer t)
      
      (defhydra hydra-text-scale (:timeout 4)
        "scale text"
        ("j" text-scale-decrease "down")
        ("k" text-scale-increase "up")
        ("q" nil "finished" :exit t))
    #+end_src
    
***** Key Bindings
     #+begin_src emacs-lisp
       (kmax/leader-keys
         "ts" '(hydra-text-scale/body :which-key "scale text"))
     #+end_src
     
