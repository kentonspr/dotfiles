* Kenton's Emacs Config

  Attempting to write a literate config file that gets consumed by babel.

  Inspired by -

  - David Wilson - [[https://github.com/daviwil/emacs-from-scratch][Github]] [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][Youtube]]
  - Daniel Mai - [[https://github.com/danielmai/.emacs.d/blob/master/config.org][Github]]
    
** Personal Info

  #+begin_src emacs-lisp
    (setq user-full-name: "Kenton Appanaitis"
          user-mail-address: "kappanaitis@gmail.com")
  #+end_src

* System
** Saved Customization File

  Settings using customize are saved in custom.el instead of init.el.
  
  #+begin_src emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)
  #+end_src

** Startup Performance
   
  #+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
    
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
                         (time-subtract after-init-time before-init-time)))
               gcs-done))
    
    (add-hook 'emacs-startup-hook #'efs/display-startup-time) 
  #+end_src

** Auto Package Updates
  [[https://github.com/rranelli/auto-package-update.el][Github]]
  
  #+begin_src emacs-lisp
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)             ;auto updates after N days
      (auto-package-update-prompt-before-update t) ;asks before update
      (auto-package-update-hide-results t)         ;prevents buffer with update results from popping up
      (auto-package-update-delete-old-versions t)  ;removes residual old version directories
      :config
      (auto-package-update-maybe)                  ;updates packages at emacs startup
      (auto-package-update-at-time "01:00"))       ;check for updates @ what time
  #+end_src
   
** no-littering
   [[https://github.com/emacscollective/no-littering][Github]]

   Keeps emacs/package files corralled.
   #+begin_src emacs-lisp
     ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
     ;; reliably, set `user-emacs-directory` before loading no-littering!
     ;(setq user-emacs-directory "~/.cache/emacs")
     
     (use-package no-littering)
     
     ;; no-littering doesn't set this by default so we must place
     ;; auto save files in the same path as it uses for sessions
     (setq auto-save-file-name-transforms
           `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
   #+end_src

** Key bindings
*** evil - vim keys
   [[https://github.com/emacs-evil/evil][Github]]

   #+begin_src emacs-lisp
	  (use-package evil
	    :init
	    (setq evil-want-integration t)
	    (setq evil-want-keybinding nil)
	    ;; (setq evil-want-C-u-scroll t)
	    ;; (setq evil-want-C-i-jump nil)
	    :config
	    (evil-mode 1)
	    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	    ;; I'm not sure aboute this
	    ;;(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	    ;; Use visual line motions even outside of visual-line-mode buffers
	    ;; Changes numbered motion key behaviour. dj would only delete one line.
	    ;; d5j would delete 5 total lines, not 5 lines below
	    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	    (evil-set-initial-state 'messages-buffer-mode 'normal)
	    (evil-set-initial-state 'dashboard-mode 'normal))
   #+end_src
   
*** evil-collection - vim keys for other modes
    [[https://github.com/emacs-evil/evil-collection][Github]]

    Defines vi like bindings for multiple modes.
    #+begin_src emacs-lisp
      (use-package evil-collection
        :after evil
        :custom (evil-collection-setup-minibuffer t)
        :config
        (evil-collection-init))
    #+end_src
  
*** evil-commentary

    #+begin_src emacs-lisp
      (use-package evil-commentary)
      (evil-commentary-mode)
    #+end_src

*** evil-eurround

    #+begin_src emacs-lisp
      (use-package evil-surround
	:ensure t
	:config
	(global-evil-surround-mode 1))
    #+end_src

*** General - Custom Keybindings
    [[https://github.com/noctuid/general.el][Github]]
   
    #+begin_src emacs-lisp
      (use-package general
	:after evil
	:config
	(general-evil-setup t) 
	(general-create-definer kmax/leader-keys
				:keymaps '(normal insert visual emacs)
				:prefix "SPC"
				:global-prefix "C-SPC")

	(kmax/leader-keys
	  "SPC" '(counsel-M-x :which-key "M-x")))

      (general-define-key (kbd "<escape>") 'keyboard-escape-quit)
     #+end_src
     
*** Leader Bindings
**** buffers

     #+begin_src emacs-lisp
       (kmax/leader-keys
	 "TAB" '((lambda () (interactive) (switch-to-buffer (other-buffer))) :which-key "previous buffer")
	 "b"  '(:ignore t :which-key "buffers")
	 "bb" '(counsel-switch-buffer :which-key "buffers list")
	 "bd" '(kill-this-buffer :which-key "kill buffer")
	 "bn" '(:ignore t :which-key "new buffers")
	 "bnn" '(evil-buffer-new :which-key "new buffer"))
	 ; "bnl" '(:ignore t :which-key "new buffer left")
	 ; "bnr" '(:ignore t :which-key "new buffer right")
	 ; "bnt" '(:ignore t :which-key "new buffer top")
	 ; "bnb" '(:ignore t :which-key "new buffer bottom")
	 ; "b C-S-d" '(kill-matching-buffers :which-key "kill buffers regex") ; I think I need to write a function here to run kill-matching-buffers with no-ask
     #+end_src

**** files

     #+begin_src emacs-lisp
       (kmax/leader-keys
	  "f"  '(:ignore t :which-key "files")
	  "fe"  '(:ignore t :which-key "emacs files")
	  "fec" '((lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org"))) :which-key "config.org")
	  "fei" '((lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/init.el"))) :which-key "init.el")
	  "fer" '((lambda () (interactive) (load-file (expand-file-name "~/.emacs.d/init.el"))) :which-key "reload init.el")
	  ;; "fec" '(:ignore t :which-key "emacs files")
	  "ff"  '(find-file :which-key "find files")
	  "fs"  '(save-buffer :which-key "save")
	  "fS"  '(:ignore t :which-key "save options")
	  "fSa" '(save-some-buffers :which-key "save all")
	  "fSg" '(magit-save-repository-buffers :which-key "save repo")
	  "fSp" '(projectile-save-project-buffers :which-key "save project"))
     #+end_src

**** git

     #+begin_src emacs-lisp
       (kmax/leader-keys
	  "g"  '(:ignore t :which-key "git")
	  "gb"  '(magit-branch :which-key "branch")
	  "gc"  '(magit-commit :which-key "commit")
	  "gF"  '(magit-pull :which-key "pull")
	  "gP"  '(magit-push :which-key "push")
	  "gr"  '(magit-rebase :which-key "push")
	  "gs"  '(magit-status :which-key "status"))
     #+end_src

**** project

     #+begin_src emacs-lisp
       (kmax/leader-keys
	  "p"  '(:ignore t :which-key "projects")
	  "pp" '(projectile-switch-project :which-key "switch project")
	  "pt" '(projectile-switch-project :which-key "switch project"))
     #+end_src

**** toggles

     #+begin_src emacs-lisp
       (kmax/leader-keys
	  "t"  '(:ignore t :which-key "toggles")
	  "tt" '(counsel-load-theme :which-key "choose theme")
	  "ts" '(hydra-text-scale/body :which-key "scale text"))
     #+end_src

**** quit

     #+begin_src emacs-lisp
       (kmax/leader-keys
	  "q"  '(:ignore t :which-key "quit options")
	  "qq" '(kill-emacs :which-key "quit")
	  "qr" '(restart-emacs :which-key "restart"))
     #+end_src
     
**** windows

     #+begin_src emacs-lisp
       (kmax/leader-keys
	  "w"  '(:ignore t :which-key "windows")
	  "wd" '(delete-window :which-key "windows"))
     #+end_src

** Built-Ins

   Enable electric-pair-mode so that character pair for things like "" are automatically added

   #+begin_src emacs-lisp
     (electric-pair-mode 1)
   #+end_src
   
** Line Numbers

   Turn on relative line numbers. I would like both literal and relative line numbers columns but I haven't seen a method for that in emacs yet.

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode t)
     (setq display-line-numbers-type 'relative)
     
     ;; Modes to ignore line numbers on
     (dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src
   
** Fonts
*** Font Size
    
    Control global font sizes for Emacs, values are in 1/10Th of a point.
    
    #+begin_src emacs-lisp
      (defvar kmax/default-font-size 120) ;monospaced fonts
      (defvar kmax/default-variable-font-size 120) 
    #+end_src

*** Font Selection

    Select the font for each face. Default and fixed-pitch are set as a mono spaced font, and variable pitch to a readable font for something like org mode.

    Fonts need to be installed. Selected fonts:
    - [[https://www.jetbrains.com/lp/mono/][JetBrains Mono]]
    - [[https://fonts.google.com/specimen/Source+Sans+Pro][Source Sans Pro]]

    #+begin_src emacs-lisp
      (set-face-attribute 'default nil :font "JetBrains Mono" :height kmax/default-font-size)
      
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height kmax/default-font-size)
      
      ;; Set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height kmax/default-variable-font-size :weight 'regular)
    #+end_src

* Packages
** All The Icons
    [[https://github.com/domtronn/all-the-icons.el][Github]]
    
    Enabling all-the-icons font. Font will still need to be installed after first start with =M-x all-the-icons-install-fonts=
    
    #+begin_src emacs-lisp
      (use-package all-the-icons)
    #+end_src

** Company Mode
   [[https://company-mode.github.io/][Github.io]]

   Autocompletion framework with drop down suggestion

   #+begin_src emacs-lisp
     (use-package company)
     (add-hook 'after-init-hook 'global-company-mode)
   #+end_src

** Doom Theme
    [[https://github.com/hlissner/emacs-doom-themes][Github]]
    
    Install doom themes and choose doom-vibrant as default

    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :config
        (customize-set-variable 'doom-vibrant-brighter-comments t)
        (load-theme 'doom-vibrant))
    #+end_src
    
** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Github]]

   Install doom modeline and adjust settings
   
    #+begin_src emacs-lisp
      (use-package doom-modeline
        :init (doom-modeline-mode 1)
        :custom ((doom-modeline-height 15)))
    #+end_src
    
** helpful
   [[https://github.com/Wilfred/helpful][Github]]

   Extended help that includes source

   #+begin_src emacs-lisp
     (use-package helpful)

     ;; Note that the built-in `describe-function' includes both functions
     ;; and macros. `helpful-function' is functions only, so we provide
     ;; `helpful-callable' as a drop-in replacement.
     (global-set-key (kbd "C-h f") #'helpful-callable)

     (global-set-key (kbd "C-h v") #'helpful-variable)
     (global-set-key (kbd "C-h k") #'helpful-key)

     ;; Lookup the current symbol at point. C-c C-d is a common keybinding
     ;; for this in lisp modes.
     (global-set-key (kbd "C-c C-d") #'helpful-at-point)

     ;; Look up *F*unctions (excludes macros).
     ;;
     ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
     ;; already links to the manual, if a function is referenced there.
     (global-set-key (kbd "C-h F") #'helpful-function)

     ;; Look up *C*ommands.
     ;;
     ;; By default, C-h C is bound to describe `describe-coding-system'. I
     ;; don't find this very useful, but it's frequently useful to only
     ;; look at interactive functions.
     (global-set-key (kbd "C-h C") #'helpful-command)
   #+end_src

** Hydra
    [[https://github.com/abo-abo/hydra][Github]]

    Hydra ties transient key bindings to related commands. Essentially creating sub menus for functionality

**** Scale Text

    Add a popup menu for scaling text

    #+begin_src emacs-lisp
      (use-package hydra
        :defer t)
      
      (defhydra hydra-text-scale (:timeout 4)
        "scale text"
        ("j" text-scale-decrease "down")
        ("k" text-scale-increase "up")
        ("q" nil "finished" :exit t))
    #+end_src
    
** ivy / counsel / swiper
   [[https://github.com/abo-abo/swiper][Github]]

   Tools for narrowing lists through fuzzy search (Ivy), functions to use narrowing for things like files (Cousel), and a search mechanism (Swiper)
   
   #+begin_src emacs-lisp
     (use-package ivy
       :init (ivy-mode 1))

     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "(%d/%d) ")

     (global-set-key (kbd "C-s") 'swiper-isearch)
     (global-set-key (kbd "M-x") 'counsel-M-x)

     (use-package counsel)

     (use-package ivy-rich
       :init (ivy-rich-mode 1))
     (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
   #+end_src

** Magit
    [[https://github.com/magit/magit][GitHub]]

    Best git edit integration ever

    #+begin_src emacs-lisp
      (use-package magit)
    #+end_src
    
** Projectile
   [[https://github.com/bbatsov/projectile][Github]]

   #+begin_src emacs-lisp
     (use-package projectile)
     (projectile-mode +1)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
   
** Rainbow-Delimiters
    [[https://github.com/Fanael/rainbow-delimiters][GitHub]]

    Colorful open/close delimiters for easy matching

    #+begin_src emacs-lisp
      (use-package rainbow-delimiters)

      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    #+end_src

** Treemacs
    [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjUvcb64p_7AhVslGoFHULHDR8QFnoECAwQAQ&url=https%3A%2F%2Fgithub.com%2FAlexander-Miller%2Ftreemacs&usg=AOvVaw0q411mH86k9gDCvRN0IGse][GitHub]]

    Tree file viewer with extras for integrations. Most settings commented

    #+begin_src emacs-lisp
      (use-package treemacs
	:defer t
	:init
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	:config
	(progn
	  (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	;;	treemacs-deferred-git-apply-delay        0.5
	;;	treemacs-directory-name-transformer      #'identity
	;;	treemacs-display-in-side-window          t
	;;	treemacs-eldoc-display                   'simple
	;;	treemacs-file-event-delay                2000
	;;	treemacs-file-extension-regex            treemacs-last-period-regex-value
	;;	treemacs-file-follow-delay               0.2
	;;	treemacs-file-name-transformer           #'identity
	;;	treemacs-follow-after-init               t
	;;	treemacs-expand-after-init               t
	;;	treemacs-find-workspace-method           'find-for-file-or-pick-first
	;;	treemacs-git-command-pipe                ""
	;;	treemacs-goto-tag-strategy               'refetch-index
	;;	treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	;;	treemacs-hide-dot-git-directory          t
	;;	treemacs-indentation                     2
	;;	treemacs-indentation-string              " "
	;;	treemacs-is-never-other-window           nil
	;;	treemacs-max-git-entries                 5000
	;;	treemacs-missing-project-action          'ask
	;;	treemacs-move-forward-on-expand          nil
	;;	treemacs-no-png-images                   nil
	;;	treemacs-no-delete-other-windows         t
	;;	treemacs-project-follow-cleanup          nil
	;;	treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	;;	treemacs-position                        'left
	;;	treemacs-read-string-input               'from-child-frame
	;;	treemacs-recenter-distance               0.1
	;;	treemacs-recenter-after-file-follow      nil
	;;	treemacs-recenter-after-tag-follow       nil
	;;	treemacs-recenter-after-project-jump     'always
	;;	treemacs-recenter-after-project-expand   'on-distance
	;;	treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	;;	treemacs-show-cursor                     nil
	;;	treemacs-show-hidden-files               t
	;;	treemacs-silent-filewatch                nil
	;;	treemacs-silent-refresh                  nil
	;;	treemacs-sorting                         'alphabetic-asc
	;;	treemacs-select-when-already-in-treemacs 'move-back
	;;	treemacs-space-between-root-nodes        t
	;;	treemacs-tag-follow-cleanup              t
	;;	treemacs-tag-follow-delay                1.5
	;;	treemacs-text-scale                      nil
	;;	treemacs-user-mode-line-format           nil
	;;	treemacs-user-header-line-format         nil
	;;	treemacs-wide-toggle-width               70?		treemacs-width                           45
	;;	treemacs-width-increment                 1
	;;	treemacs-width-is-initially-locked       t
	;;	treemacs-workspace-switch-cleanup        nil
		)
	  ;; The default width and height of the icons is 22 pixels. If you are

	  ;; using a Hi-DPI display, uncomment this to double the icon size.
	  ;;(treemacs-resize-icons 44)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode 'always)
	  (when treemacs-python-executable
	    (treemacs-git-commit-diff-mode t))

	  (pcase (cons (not (null (executable-find "git")))
		       (not (null treemacs-python-executable)))
	    (`(t . t)
	     (treemacs-git-mode 'deferred))
	    (`(t . _)
	     (treemacs-git-mode 'simple)))

	  (treemacs-hide-gitignored-files-mode nil))
	:bind
	(:map global-map
	      ("M-0"       . treemacs-select-window)
	      ("C-x t 1"   . treemacs-delete-other-windows)
	      ("C-x t t"   . treemacs)
	      ("C-x t d"   . treemacs-select-directory)
	      ("C-x t B"   . treemacs-bookmark)
	      ("C-x t C-t" . treemacs-find-file)
	      ("C-x t M-t" . treemacs-find-tag)))

      (use-package treemacs-evil
	:after (treemacs evil))

      (use-package treemacs-projectile
	:after (treemacs projectile))

      (use-package treemacs-icons-dired
	:hook (dired-mode . treemacs-icons-dired-enable-once))

      (use-package treemacs-magit
	:after (treemacs magit))

      ;;(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
	;;:after (treemacs persp-mode) ;;or perspective vs. persp-mode
	;;:ensure t
	;;:config (treemacs-set-scope-type 'Perspectives))

      ;;(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
	;;:after (treemacs)
	;;:ensure t
	;;:config (treemacs-set-scope-type 'Tabs))
    #+end_src
    
** Which-Key
    [[https://github.com/justbur/emacs-which-key][Github]]

   #+begin_src emacs-lisp
     (use-package which-key
       :defer 0
       :diminish which-key-mode
       :config
       (which-key-mode)
       (setq which-key-idle-delay 0.05))
   #+end_src

* TODOs
yasnippet
flycheck
lsp
python
rust
javascript
vue
undo-tree
sudo-edit
multiple-cursors
comments?
